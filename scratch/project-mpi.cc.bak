#include "ns3/core-module.h"
#include "ns3/mobility-module.h"
#include "ns3/config-store.h"
#include "ns3/mmwave-helper.h"
#include <ns3/buildings-helper.h>
#include "ns3/log.h"
#include <ns3/buildings-module.h>
#include <ns3/point-to-point-helper.h>
#include <ns3/internet-stack-helper.h>
#include <ns3/mmwave-point-to-point-epc-helper.h>
#include <ns3/ipv4-static-routing-helper.h>
#include <ns3/rng-seed-manager.h>
#include <ns3/applications-module.h>
#include <iostream>
#include <fstream>
#include <vector>
#include <stdexcept>

#include <mpi.h>
#include "ns3/mpi-interface.h"

using namespace std;
using namespace ns3;
using namespace mmwave;

/* NOTES

Some good terminoligy at
https://www.artizanetworks.com/resources/tutorials/sae_tec.html



*/

/** Generate a single building inside the specified box */
Ptr<Building> makeBuilding(const Box& box) {
  Ptr<Building> building = Create<Building>();
  building->SetBoundaries(box);
  building->SetBuildingType(Building::Residential);
  building->SetExtWallsType(Building::ConcreteWithoutWindows);

  building->SetNFloors (1);
  building->SetNRoomsX (1);
  building->SetNRoomsY (1);

  return building;
}

/** Generate a grid of buildings of the specified size */
BuildingContainer generateManhattanGrid(int xBlocks, int yBlocks) {
  BuildingContainer ret;

  double buildingWidth = 75;
  double buildingHeight = 12;
  double streetWidth = 15;
      
  for (int xBlock = 0; xBlock < xBlocks; xBlock++) {
    for (int yBlock = 0; yBlock < yBlocks; yBlock++) {
      int xStart = (buildingWidth + streetWidth) * xBlock;
      int xStop = xStart + buildingWidth;

      int yStart = (buildingWidth + streetWidth) * yBlock;
      int yStop = yStart + buildingWidth;

      ret.Add(makeBuilding(Box(
        xStart, xStop,
        yStart, yStop,
        0, buildingHeight
      )));
    }
  }

  return ret;
}

static ns3::GlobalValue g_outPath ("outPath",
                                   "The path of output log files",
                                   ns3::StringValue ("./project-stats/"), ns3::MakeStringChecker ());
static ns3::GlobalValue g_runNumber ("runNumber", "Run number for rng",
                                     ns3::UintegerValue (10), ns3::MakeUintegerChecker<uint32_t> ());

static ofstream *mobilityOs;

void SetupTraceConfig(string path, uint32_t runSet) {
  //get current time
  time_t rawtime;
  struct tm * timeinfo;
  char buffer[80];
  time (&rawtime);
  timeinfo = localtime (&rawtime);
  strftime (buffer,80,"%d_%m_%Y_%I_%M_%S",timeinfo);
  std::string time_str (buffer);

  // rng things
  
  uint32_t seedSet = 5;
  RngSeedManager::SetSeed (seedSet);
  RngSeedManager::SetRun (runSet);
  char seedSetStr[21];
  char runSetStr[21];
  sprintf (seedSetStr, "%d", seedSet);
  sprintf (runSetStr, "%d", runSet);

  int sysId = MpiInterface::GetSystemId();
  char systemStr[4];
  sprintf(systemStr, "%d", sysId);


  std::string mmWaveOutName = "MmWaveSwitchStats";
  std::string lteOutName = "LteSwitchStats";
  std::string dlRlcOutName = "DlRlcStats";
  std::string dlPdcpOutName = "DlPdcpStats";
  std::string ulRlcOutName = "UlRlcStats";
  std::string ulPdcpOutName = "UlPdcpStats";
  std::string  ueHandoverStartOutName =  "UeHandoverStartStats";
  std::string enbHandoverStartOutName = "EnbHandoverStartStats";
  std::string  ueHandoverEndOutName =  "UeHandoverEndStats";
  std::string enbHandoverEndOutName = "EnbHandoverEndStats";
  std::string cellIdInTimeOutName = "CellIdStats";
  std::string cellIdInTimeHandoverOutName = "CellIdStatsHandover";
  std::string mmWaveSinrOutputFilename = "MmWaveSinrTime";
  std::string x2statOutputFilename = "X2Stats";
  std::string udpSentFilename = "UdpSent";
  std::string udpReceivedFilename = "UdpReceived";
  std::string extension = ".txt";
  std::string version = "project";

  auto mkPath = [=](string subName) {
    return StringValue(path + version + "-" + subName + "_t" + systemStr + "_" + seedSetStr + "_" + runSetStr + "_" + time_str + extension);
  };

  // Purportedly we'll get more logs out of this...
  Config::SetDefault ("ns3::McStatsCalculator::MmWaveOutputFilename",                       mkPath(mmWaveOutName));
  Config::SetDefault ("ns3::McStatsCalculator::LteOutputFilename",                          mkPath(lteOutName));
  Config::SetDefault ("ns3::McStatsCalculator::CellIdInTimeOutputFilename",                 mkPath(cellIdInTimeOutName));
  Config::SetDefault ("ns3::MmWaveBearerStatsCalculator::DlRlcOutputFilename",              mkPath(dlRlcOutName));
  Config::SetDefault ("ns3::MmWaveBearerStatsCalculator::UlRlcOutputFilename",              mkPath(ulRlcOutName));
  Config::SetDefault ("ns3::MmWaveBearerStatsCalculator::DlPdcpOutputFilename",             mkPath(dlPdcpOutName));
  Config::SetDefault ("ns3::MmWaveBearerStatsCalculator::UlPdcpOutputFilename",             mkPath(ulPdcpOutName));
  Config::SetDefault ("ns3::MmWaveBearerStatsConnector::UeHandoverStartOutputFilename",     mkPath(ueHandoverStartOutName));
  Config::SetDefault ("ns3::MmWaveBearerStatsConnector::EnbHandoverStartOutputFilename",    mkPath(enbHandoverStartOutName));
  Config::SetDefault ("ns3::MmWaveBearerStatsConnector::UeHandoverEndOutputFilename",       mkPath(ueHandoverEndOutName));
  Config::SetDefault ("ns3::MmWaveBearerStatsConnector::EnbHandoverEndOutputFilename",      mkPath(enbHandoverEndOutName));
  Config::SetDefault ("ns3::MmWaveBearerStatsConnector::CellIdStatsHandoverOutputFilename", mkPath(cellIdInTimeHandoverOutName));
  Config::SetDefault ("ns3::MmWaveBearerStatsConnector::MmWaveSinrOutputFilename",          mkPath(mmWaveSinrOutputFilename));
  Config::SetDefault ("ns3::CoreNetworkStatsCalculator::X2FileName",                        mkPath(x2statOutputFilename));
  
  // A dump of all packets sent/received, with size, SINR
  Config::SetDefault ("ns3::MmWavePhyRxTrace::OutputFilename",                              mkPath("PacketTrace"));
  /*
    With some help from https://www.etsi.org/deliver/etsi_ts/136200_136299/136213/08.03.00_60/ts_136213v080300p.pdf
    time - duh
    frame - frame # for ENB/UE pair
    subF - subframe (frames consist of subframes, first couple might be control ul/dl,
           the rest are data uplink/downlink)
    1stSymbol - no idea
    symbol# - # of symbols in subframe
    cellId - ID of ENB
    rnti - radio network temporary identifier (ENB Id for UE)
    ccId - no idea
    tbSize - transmission block size
  */

 mobilityOs = new ofstream();
 mobilityOs->open(mkPath("mobiltiy").Get());
}

// Re-associate to ENB every so often
void reattach(Ptr<MmWaveHelper> mmWave, NetDeviceContainer enbNetDev, NetDeviceContainer ueNetDev) {
  NS_LOG_UNCOND("Updating attachments at t=" << Simulator::Now());

  // TODO: "al UEs are capable of performing hard handover when the SINR
  // difference between the current cell and a possible handover cell is more
  // than 3 dB"
  
  mmWave->AttachToClosestEnb(ueNetDev, enbNetDev);

  // Display a bit
  for (uint32_t i = 0; i < ueNetDev.GetN(); i++) {
    auto ue = ueNetDev.Get(i)->GetObject<MmWaveUeNetDevice>();
    auto enb = ue->GetTargetEnb();
    cout << "  " << ue->GetAddress() << " is assoc to " << enb->GetAddress() << endl;
  }

  Simulator::Schedule(Seconds(10), reattach, mmWave, enbNetDev, ueNetDev);
}

// Log out locations
void CourseChange(ofstream *os, string context, Ptr<const RandomWaypointMobilityModel> mobility) {
  // From vanet-routing-compare.cc
  Vector pos = mobility->GetPosition (); // Get position
  Vector vel = mobility->GetVelocity (); // Get velocity

  int nodeId = mobility->GetObject<Node> ()->GetId ();

  //NS_LOG_UNCOND ("Changing pos for node=" << nodeId << " at " << Simulator::Now () );

  // Prints position and velocities
  // *os << Simulator::Now () << " POS: x=" << pos.x << ", y=" << pos.y
  //     << ", z=" << pos.z << "; VEL:" << vel.x << ", y=" << vel.y
  //     << ", z=" << vel.z << std::endl;
  *os << Simulator::Now() << "\t"
      << nodeId << "\t"
      << pos.x << "\t"
      << pos.y << "\t"
      << pos.z << "\t"
      << vel.x << "\t"
      << vel.y << "\t"
      << vel.z << endl;
}

void LogAllUeLocations(ofstream *os, NodeContainer *ueNodes) {
  for (uint32_t i = 0; i < ueNodes->GetN(); i++) {
    auto node = ueNodes->Get(i);
    auto mobility = node->GetObject<RandomWaypointMobilityModel>();
    if (mobility == nullptr) {
      *os << node->GetId() << " had no mobility" << endl;
      continue;
    }
    CourseChange(os, "sched", mobility);
  }

  Simulator::Schedule(MilliSeconds(100), &LogAllUeLocations, os, ueNodes);
}

/** Generate some traffic */
void useTrafficGenerator(const NodeContainer &ueNodes, const Ipv4InterfaceContainer &ueIpIface, Ptr<Node> remoteHost) {
  // From mmwave-epc-tdma.cc
  
  // In microseconds
  double interPacketInterval = 1;

  // Install and start applications on UEs and remote host
  uint16_t dlPort = 1234;
  uint16_t ulPort = 2000;
  uint16_t otherPort = 3000;
  ApplicationContainer clientApps;
  ApplicationContainer serverApps;
  uint32_t packetSize = 1400;

  double dataRateMB = 250e6;        // 250 MBps
  double onTimeSec = packetSize / dataRateMB;
  std::stringstream ss;
  ss << "ns3::ConstantRandomVariable[Constant=" << onTimeSec << "]";
  std::cout << "OnTime == " << ss.str () << std::endl;
  OnOffHelper dlClient ("ns3::UdpSocketFactory", InetSocketAddress (Ipv4Address::GetAny (), dlPort));
  OnOffHelper ulClient ("ns3::UdpSocketFactory", InetSocketAddress (Ipv4Address::GetAny (), ulPort));
  dlClient.SetAttribute ("PacketSize", UintegerValue (packetSize));
  ulClient.SetAttribute ("PacketSize", UintegerValue (packetSize));
  dlClient.SetAttribute ("DataRate", DataRateValue (8 * dataRateMB));
  ulClient.SetAttribute ("DataRate", DataRateValue (8 * dataRateMB));
  dlClient.SetAttribute ("OnTime", StringValue (ss.str ()));
  ulClient.SetAttribute ("OnTime", StringValue (ss.str ()));
  ss.str ("");
  ss << "ns3::ExponentialRandomVariable[Mean=" << interPacketInterval * 1e-6 << "]";
  std::cout << "OffTime == " << ss.str () << std::endl;
  dlClient.SetAttribute ("OffTime", StringValue (ss.str ()));
  ulClient.SetAttribute ("OffTime", StringValue (ss.str ()));

  for (uint32_t u = 0; u < ueNodes.GetN (); ++u)
    {
      ++ulPort;
      ++otherPort;
      PacketSinkHelper dlPacketSinkHelper ("ns3::UdpSocketFactory", InetSocketAddress (Ipv4Address::GetAny (), dlPort));
      PacketSinkHelper ulPacketSinkHelper ("ns3::UdpSocketFactory", InetSocketAddress (Ipv4Address::GetAny (), ulPort));
      serverApps.Add (dlPacketSinkHelper.Install (ueNodes.Get (u)));
      serverApps.Add (ulPacketSinkHelper.Install (remoteHost));

//		UdpClientHelper dlClient (ueIpIface.GetAddress (u), dlPort);
//		dlClient.SetAttribute ("Interval", TimeValue (MicroSeconds(interPacketInterval)));
//		dlClient.SetAttribute ("MaxPackets", UintegerValue(1000000));
//		dlClient.SetAttribute ("PacketSize", UintegerValue(packetSize));
//
//		UdpClientHelper ulClient (remoteHostAddr, ulPort);
//		ulClient.SetAttribute ("Interval", TimeValue (MicroSeconds(interPacketInterval)));
//		ulClient.SetAttribute ("MaxPackets", UintegerValue(1000000));
//		ulClient.SetAttribute ("PacketSize", UintegerValue(packetSize));

      //UdpClientHelper client (ueIpIface.GetAddress (u), otherPort);
      //client.SetAttribute ("Interval", TimeValue (MicroSeconds(interPacketInterval)));
      //client.SetAttribute ("MaxPackets", UintegerValue(1000000));
      dlClient.SetAttribute ("Remote", AddressValue (InetSocketAddress (ueIpIface.GetAddress (u), dlPort)));
      //ulClient.SetAttribute ("Remote", AddressValue (InetSocketAddress (remoteHostAddr, ulPort)));

      clientApps.Add (dlClient.Install (remoteHost));
//		clientApps.Add (ulClient.Install (ueNodes.Get(u)));
//		if (u+1 < ueNodes.GetN ())
//		{
//			clientApps.Add (client.Install (ueNodes.Get(u+1)));
//		}
//		else
//		{
//			clientApps.Add (client.Install (ueNodes.Get(0)));
//		}
    }
  serverApps.Start (Seconds (0.003));
  clientApps.Start (Seconds (0.003));
}

class InternetComponent : public RefCountBase {
public:
  InternetStackHelper stack;
  Ptr<Node> packetGateway;
  Ipv4StaticRoutingHelper routingHelper;
  Ptr<Node> remoteHost;
  Ptr<MmWavePointToPointEpcHelper> epcHelper;
};

/** Sets up the internet and packet gateway, with a single simulated host */
Ptr<InternetComponent> useInternet(Ptr<MmWaveHelper> mmWave) {
  // From mmwave-epc-tdma.cc
  Ptr<InternetComponent> internet = new InternetComponent();

  internet->epcHelper = CreateObject<MmWavePointToPointEpcHelper> ();
  mmWave->SetEpcHelper(internet->epcHelper);
  internet->packetGateway = internet->epcHelper->GetPgwNode ();


  // Create a single RemoteHost
  NodeContainer remoteHostContainer;
  remoteHostContainer.Create (1);
  internet->remoteHost = remoteHostContainer.Get (0);
  internet->stack.Install (remoteHostContainer);

  // Create the Internet
  PointToPointHelper p2ph;
  // Table 1: Input data rate=100 Gbps
  p2ph.SetDeviceAttribute ("DataRate", DataRateValue (DataRate ("100Gb/s")));
  // Table 1: MTU size = 1500 bytes
  p2ph.SetDeviceAttribute ("Mtu", UintegerValue (1500));
  // Table 1: PGW and remote host link delay=10ms
  p2ph.SetChannelAttribute ("Delay", TimeValue (MilliSeconds (100.0)));
  NetDeviceContainer internetDevices = p2ph.Install (internet->packetGateway, internet->remoteHost);
  Ipv4AddressHelper ipv4h;
  ipv4h.SetBase ("1.0.0.0", "255.0.0.0");
  Ipv4InterfaceContainer internetIpIfaces = ipv4h.Assign (internetDevices);

  Ptr<Ipv4StaticRouting> remoteHostStaticRouting = internet->routingHelper.GetStaticRouting (internet->remoteHost->GetObject<Ipv4> ());
  remoteHostStaticRouting->AddNetworkRouteTo (Ipv4Address ("7.0.0.0"), Ipv4Mask ("255.0.0.0"), 1);

  return internet;
}

Ptr<MmWaveHelper> useMmWave() {
  Ptr<MmWaveHelper> mmWave = CreateObject<MmWaveHelper>();
  // From II.B.1: "All simulations utilize the 3GPP pathloss model [10] to calculate penetration loss in buildings"
  mmWave->SetAttribute("PathlossModel", StringValue("ns3::MmWave3gppBuildingsPropagationLossModel"));
  // From II.A: "The channel model used for the simulations in this paper is
  // based on 3GPP mmWave channel model described in [10]"
  mmWave->SetAttribute("ChannelModel", StringValue("ns3::MmWave3gppChannel"));
  mmWave->Initialize();
  return mmWave;
}

int main(int argc, char **argv) {
  // #ifndef NS3_MPI
  // NS_FATAL_ERROR ("Can't use distributed simulator without MPI compiled in");
  // #endif

  // Setup MPI
  GlobalValue::Bind("SimulatorImplementationType", StringValue("ns3::DistributedSimulatorImpl"));
  // Enable parallel simulator with the command line arguments
  MpiInterface::Enable (&argc, &argv);

  uint32_t systemCount = MpiInterface::GetSize ();
  cout << "Running on " << systemCount << " MPI devices" << endl;

  try {
    LogComponentEnable ("MmWavePhyRxTrace", LOG_LEVEL_DEBUG);
    //LogComponentEnable ("MmWaveBearerStatsConnector", LOG_LEVEL_ALL);



    CommandLine cmd;
    cmd.Parse(argc, argv);

    // Table 1: Propagation Scenario = UMi-StreetCanyon
    Config::SetDefault ("ns3::MmWave3gppPropagationLossModel::Scenario", StringValue ("UMi-StreetCanyon"));


    // From mc-twoenbs.cc
    // Argument parsing placeholders
    UintegerValue uintegerValue;
    BooleanValue booleanValue;
    StringValue stringValue;
    DoubleValue doubleValue;

    GlobalValue::GetValueByName ("outPath", stringValue);
    std::string path = stringValue.Get();
    GlobalValue::GetValueByName ("runNumber", uintegerValue);
    uint32_t runSet = uintegerValue.Get ();
    SetupTraceConfig(path, runSet);

    Ptr<MmWaveHelper> mmWave = useMmWave();
    Ptr<InternetComponent> internet = useInternet(mmWave);


    

    ConfigStore inputConfig;
    inputConfig.ConfigureDefaults ();

    // Create the four blocks
    BuildingContainer buildings = generateManhattanGrid(2, 2);
    

    // Set up base stations (ENB/"Evolved Node B" in 3GPP terminology)
    NodeContainer enbNodes;
    enbNodes.Create(4);

    // Assign the ENB a constant position
    auto enbPositionAlloc = CreateObject<ListPositionAllocator>();
    // Table 1: Infrastructure mmWave AP height = 3m
    double enbLoc1 = 75 / 2;
    double enbLoc2 = enbLoc1 + 75 + 15;
    double enbLocMid = 75 + 15 / 2;
    enbPositionAlloc->Add(Vector(enbLocMid, enbLoc1, 3.0));
    enbPositionAlloc->Add(Vector(enbLocMid, enbLoc2, 3.0));
    enbPositionAlloc->Add(Vector(enbLoc1, enbLocMid, 3.0));
    enbPositionAlloc->Add(Vector(enbLoc2, enbLocMid, 3.0));
    MobilityHelper enbMobility;
    enbMobility.SetMobilityModel("ns3::ConstantPositionMobilityModel");
    enbMobility.SetPositionAllocator(enbPositionAlloc);
    enbMobility.Install(enbNodes);

    

    // Associate with buildings
    BuildingsHelper::Install(enbNodes);

    // Set up users (UEs/"User Equipments")
    NodeContainer ueNodes;
    ueNodes.Create(20);

    // Assignt the UE a constant position for now
    MobilityHelper ueMobility;
    // ueMobility.SetMobilityModel("ns3::ConstantVelocityMobilityModel");
    // ueMobility.Install(ueNodes);
    // ueNodes.Get(0)->GetObject<MobilityModel>()->SetPosition(Vector(87.5, 60, 2.0));
    // ueNodes.Get(0)->GetObject<ConstantVelocityMobilityModel> ()->SetVelocity (Vector (1, 0, 0));

    // ueNodes.Get(1)->GetObject<MobilityModel>()->SetPosition(Vector(87.5, 65, 2.0));
    // ueNodes.Get(1)->GetObject<ConstantVelocityMobilityModel> ()->SetVelocity (Vector (1, 0, 0));

    // Uniformly pick positions, rejecting those in buildings
    
    auto uePositionAlloc = CreateObject<OutdoorPositionAllocator>();
    auto xyRandomPos = CreateObject<UniformRandomVariable>();
    xyRandomPos->SetAttribute("Min", DoubleValue(0.0));
    xyRandomPos->SetAttribute("Max", DoubleValue(165.0));
    auto zConstantPos = CreateObject<ConstantRandomVariable>();
    zConstantPos->SetAttribute("Constant", DoubleValue(1.6));
    uePositionAlloc->SetX(xyRandomPos);
    uePositionAlloc->SetY(xyRandomPos);
    uePositionAlloc->SetZ(zConstantPos);
    
    ueMobility.SetMobilityModel("ns3::RandomWaypointMobilityModel",
      // Start walking immediately, don't stop at waypoints
      "Pause", StringValue("ns3::ConstantRandomVariable[Constant=0.2]"),
      // Table I: Speed = 5 km/h ~= 1.4 m/s
      "Speed", StringValue("ns3::ConstantRandomVariable[Constant=1.4]"),
      // Hopefully stay on the streets?
      "PositionAllocator", PointerValue(uePositionAlloc)
      );
    ueMobility.SetPositionAllocator(uePositionAlloc);
    ueMobility.Install(ueNodes);

    // Config::Connect("/NodeList/*/$ns3::RandomWaypointMobilityModel/CourseChange",
    //                 MakeBoundCallback(&CourseChange, &courseOs));

    // That didn't work, just update all the time
    LogAllUeLocations(mobilityOs, &ueNodes);

    // Associate with our buildings
    BuildingsHelper::Install(ueNodes);

    // Add mmWave model
    NetDeviceContainer enbNetDev = mmWave->InstallEnbDevice(enbNodes);
    NetDeviceContainer ueNetDev = mmWave->InstallUeDevice(ueNodes);

    // Install the IP stack on the UEs
    internet->stack.Install (ueNodes);
    Ipv4InterfaceContainer ueIpIface;
    ueIpIface = internet->epcHelper->AssignUeIpv4Address (ueNetDev);
    // Assign IP address to UEs, and install applications
    for (uint32_t u = 0; u < ueNodes.GetN (); ++u)
    {
      Ptr<Node> ueNode = ueNodes.Get (u);
      // Set the default gateway for the UE
      Ptr<Ipv4StaticRouting> ueStaticRouting = internet->routingHelper.GetStaticRouting (ueNode->GetObject<Ipv4> ());
      ueStaticRouting->SetDefaultRoute (internet->epcHelper->GetUeDefaultGatewayAddress (), 1);
    }

    // Log some things
    mmWave->EnableTraces();
    NS_LOG_UNCOND("Start of simulation state");
    for (uint32_t i = 0; i < enbNodes.GetN(); i++) {
      auto node = enbNodes.Get(i);
      auto dev = enbNetDev.Get(i);
      auto pos = node->GetObject<MobilityModel>();
      NS_LOG_UNCOND("  ENB " << i << " is " << dev->GetAddress() << " at position " << pos->GetPosition());
    }

    // Associate UE to ENB (and schedule future updates)
    reattach(mmWave, enbNetDev, ueNetDev);

    // Schedule some traffic
    useTrafficGenerator(ueNodes, ueIpIface, internet->remoteHost);

    // Set QoS
    EpsBearer bearer(EpsBearer::GBR_CONV_VOICE);
    mmWave->ActivateDataRadioBearer(ueNetDev, bearer);
    
    

    // Ensures everyone stays outside?
    BuildingsHelper::MakeMobilityModelConsistent();

    Simulator::Stop(Seconds(85));
    Simulator::Run();
    Simulator::Destroy();
    // Exit the MPI execution environment
    MpiInterface::Disable ();
    return 0;
  } catch (std::exception& e) {
    std::cerr << e.what() << std::endl;
    throw;
  }
}